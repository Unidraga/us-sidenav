{"version":3,"file":"sidenav.component.js","sourceRoot":"","sources":["../../tmp/sidenav/sidenav.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,SAAS,EAAE,KAAK,EAAqB,wBAAwB,EAAE,SAAS,EAAQ,MAAM,eAAe,CAAC;AAClI,OAAO,EAAE,WAAW,EAAyB,MAAM,gBAAgB,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAEzD,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAIjD;IAiDE,0BAAoB,YAAyB,EAAU,iBAAoC,EACjF,wBAAkD,EAAU,MAAqB,EACjF,eAAgC,EAAU,qBAA4C;QAF5E,iBAAY,GAAZ,YAAY,CAAa;QAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;QACjF,6BAAwB,GAAxB,wBAAwB,CAA0B;QAAU,WAAM,GAAN,MAAM,CAAe;QACjF,oBAAe,GAAf,eAAe,CAAiB;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QAnBvF,SAAI,GAAW,EAAE,CAAC;QAGnB,aAAQ,GAAG,IAAI,GAAG,EAAe,CAAC;QAY1C,aAAQ,GAAc,EAAE,CAAC;IAKzB,CAAC;IAED,mCAAQ,GAAR;QAAA,iBA8DC;QA7DC,IAAI,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,SAAS,CACvD,UAAC,SAAc;YACb,KAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,SAAS,CACjD,UAAC,GAAQ;YACP,KAAI,CAAC,WAAW,GAAG,GAAG,CAAC;QACzB,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC,SAAS,CAC1C,UAAC,IAAS;YACR,qBAAqB;YACrB,0CAA0C;YAC1C,mDAAmD;YACnD,8BAA8B;YAC9B,IAAM,aAAa,GAAG,IAAI,CAAC;YAE3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,aAAa;YACb,sDAAsD;YACtD,+CAA+C;YAC/C,gDAAgD;YAChD,mCAAmC;YACnC,mDAAmD;YACnD,2DAA2D;YAC3D,iDAAiD;YAEjD,eAAe;YACf,IAAM,YAAY,GAAG,KAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CACrD,UAAC,OAAY,IAAK,OAAA,OAAO,CAAC,IAAI,KAAK,KAAI,CAAC,IAAI,EAA1B,CAA0B,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClB,OAAO,CAAC,KAAK,CAAC,gCAAgC,GAAG,KAAI,CAAC,IAAI,CAAC,CAAC;gBAC5D,MAAM,CAAC;YACT,CAAC;YACD,yDAAyD;YACzD,IAAM,UAAU,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC;YACpD,IAAM,WAAW,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;YAChD,IAAM,OAAO,GAAG,UAAU,CAAC,cAAc,CAAC,CAAC;YAC3C,IAAM,eAAe,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;YACnC,IAAM,WAAW,GAAG,eAAe,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAM,iBAAiB,GAAG,eAAe,CAAC,mBAAmB,CAAC,CAAC;YAC/D,IAAM,YAAY,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;YAClD,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/B,KAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;YAE7E,mDAAmD;YACnD,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC,EACD,UAAC,KAAU;YACT,OAAO,CAAC,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1C,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;YAC/B,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC3B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,gCAAgC,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;QACH,8CAA8C;IAChD,CAAC;IAED,sCAAW,GAAX;IACA,CAAC;IAED,+CAA+C;IAC/C,mBAAmB;IACnB,cAAc;IACd,MAAM;IAEN,8BAA8B;IAC9B,sDAAsD;IAEtD,4BAA4B;IAC5B,yFAAyF;IACzF,gDAAgD;IAChD,QAAQ;IACR,QAAQ;IACR,IAAI;IAEI,uCAAY,GAApB,UAAqB,iBAAsB,EAAE,YAAiB,EAAE,WAAmB,EAAE,WAAiB;QACpG,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACpB,KAAK,SAAS,CAAC;YACf,KAAK,gBAAgB;gBAAE,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;gBACtF,KAAK,CAAC;YACR,KAAK,UAAU;gBAAE,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;gBAC1E,KAAK,CAAC;YACR,KAAK,MAAM;gBAAE,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;gBAC/E,KAAK,CAAC;YACR,SAAS,OAAO,CAAC,KAAK,CAAC,iCAAiC,GAAG,WAAW,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAEO,2CAAgB,GAAxB,UAAyB,iBAAsB,EAAE,YAAiB,EAAE,WAAgB;QAApF,iBAoCC;QAnCC,IAAM,QAAQ,GAAG,WAAW,CAAC;QAC7B,IAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAExC,IAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,iBAAiB,CAAC,OAAO,CAAC,UAAC,OAAY;YACrC,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;YACvB,IAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC;YACvC,IAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC;YAEvC,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,YAAY,EAA7B,CAA6B,CAAC,CAAC;YACnF,IAAM,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;YAE5C,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,YAAY,EAA7B,CAA6B,CAAC,CAAC;YACnF,IAAM,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;YAE5C,uBAAuB;YACvB,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;YACxC,IAAM,SAAS,GAAG,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;YACpE,EAAE,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,CAAC,CAAC;YAC5E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,CAAC,CAAC;gBAC9E,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,MAAM,CAAC;YACT,CAAC;YAED,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;YAClC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,qDAA0B,GAAlC,UAAmC,iBAAsB,EAAE,YAAiB;QAA5E,iBAmCC;QAlCC,IAAM,QAAQ,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;QACjC,IAAM,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAE3D,IAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,iBAAiB,CAAC,OAAO,CAAC,UAAC,OAAY;YACrC,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YACzC,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YAEzC,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,EAAE,KAAK,YAAY,EAAxB,CAAwB,CAAC,CAAC;YAC9E,IAAM,cAAc,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAE/D,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,EAAE,KAAK,YAAY,EAAxB,CAAwB,CAAC,CAAC;YAC9E,IAAM,cAAc,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAE/D,uBAAuB;YACvB,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;YACxC,IAAM,SAAS,GAAG,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;YACpE,EAAE,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,CAAC,CAAC;YAC5E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,CAAC,CAAC;gBAC9E,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,MAAM,CAAC;YACT,CAAC;YAED,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;YAClC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,+CAAoB,GAA5B,UAA6B,iBAAsB,EAAE,YAAiB;QAAtE,iBAmCC;QAlCC,IAAM,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,EAAE,KAAK,UAAU,EAAtB,CAAsB,CAAC,CAAC;QAC1E,IAAM,YAAY,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;QAE1D,IAAI,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzB,iBAAiB,CAAC,OAAO,CAAC,UAAC,OAAY;YACrC,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YACzC,IAAM,YAAY,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YAEzC,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,EAAE,KAAK,YAAY,EAAxB,CAAwB,CAAC,CAAC;YAC9E,IAAM,cAAc,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;YAE9D,IAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,EAAE,KAAK,YAAY,EAAxB,CAAwB,CAAC,CAAC;YAC9E,IAAM,cAAc,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC;YAE9D,uBAAuB;YACvB,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;YACxC,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;YACxC,IAAM,SAAS,GAAG,KAAI,CAAC,aAAa,CAAC,KAAI,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;YACpE,EAAE,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,CAAC,CAAC;YAC5E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,GAAG,CAAC,YAAY,GAAG,cAAc,GAAG,eAAe,GAAG,cAAc,CAAC,CAAC;gBAC9E,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAC3B,MAAM,CAAC;YACT,CAAC;YAED,IAAI,GAAG,IAAI,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,cAAc,CAAC;YAClC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,wCAAa,GAArB,UAAsB,OAAY,EAAE,IAAY;QAAhD,iBAaC;QAZC,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,OAAA,IAAI,CAAC,WAAW,KAAK,IAAI,EAAzB,CAAyB,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC;QAED,OAAO,CAAC,IAAI,CAAC,UAAC,OAAY;YACxB,MAAM,GAAG,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEO,qDAA0B,GAAlC,UAAmC,OAAkB;QAArD,iBAWC;QAVC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,CAAC;QACT,CAAC;QAED,OAAO,CAAC,OAAO,CAAC,UAAC,OAAY;YAC3B,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACtB,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YACpD,CAAC;YACD,KAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,2CAAgB,GAAhB,UAAiB,QAAgB;QAC/B,IAAM,IAAI,GAAI,IAAI,CAAC,QAAmC,CAAC,QAAQ,CAAC,CAAC;QACjE,wCAAwC;QACxC,gCAAgC;QAChC,MAAM,CAAC,IAAI,CAAC,CAAC,8BAA8B;IAC7C,CAAC;IAEO,wCAAa,GAArB,UAAsB,SAAoB;QACxC,EAAE,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;YAC5B,OAAO,CAAC,KAAK,CAAC,sBAAsB,GAAG,SAAS,CAAC,CAAC;YAClD,MAAM,CAAC;QACT,CAAC;QAED,IAAM,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,SAAS,CAAC,CAAC;QAE1F,IAAM,gBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;QACxD,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAEzB,IAAM,YAAY,GAAG,gBAAgB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QACxE,kEAAkE;QAClD,YAAY,CAAC,QAAS,CAAC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IACpE,CAAC;;gBAtTF,SAAS,SAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,y1BAmBT;oBACD,MAAM,EAAE,CAAC,sEAIR,CAAC;oBACF,SAAS,EAAE,CAAC,qBAAqB,EAAE,eAAe,CAAC;iBACpD;;;;gBAtCQ,WAAW;gBADX,iBAAiB;gBAAuC,wBAAwB;gBAOhF,aAAa;gBADb,eAAe;gBADf,qBAAqB;;;2BAqC3B,SAAS,SAAC,aAAa;uBACvB,KAAK;uBAaL,KAAK;;IA0QR,uBAAC;CAAA,AAvTD,IAuTC;SA1RY,gBAAgB","sourcesContent":["import { ChangeDetectorRef, Component, Input, OnInit, OnDestroy, ComponentFactoryResolver, ViewChild, Type } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NavItem } from './nav-item';\nimport { FormDirective } from '../shared/form.directive';\nimport { FormComponent } from '../shared/form.component';\nimport { ComponentRouteService } from '../shared/route.service';\nimport { WorkflowService } from '../shared/workflow.service';\nimport { SideNavConfig } from './sidenav-config';\nimport { SideNavModule } from '../sidenav.module';\nimport { Route } from '@angular/router';\n\n@Component({\n  selector: 'us-sidenav',\n  template: `\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-0\">\n          <mat-sidenav-container class=\"example-sidenav-container\">\n            <mat-sidenav #snav role=\"navigation\" opened mode=\"side\" class=\"col-lg-3 col-md-3 col-sm-3\">\n              <mat-nav-list>\n                <us-sidenav-list-item *ngFor=\"let item of navItems\" [item]=\"item\"></us-sidenav-list-item>\n              </mat-nav-list>\n            </mat-sidenav>\n\n            <mat-sidenav-content role=\"main\" class=\"col-lg-9 col-md-9 col-sm-9\">\n              <ng-template form-host></ng-template>\n            </mat-sidenav-content>\n          </mat-sidenav-container>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .example-sidenav-container {\n      height: 1200px;\n    }\n  `],\n  providers: [ComponentRouteService, WorkflowService]\n})\nexport class SideNavComponent implements OnInit, OnDestroy {\n  // @Input() forms: FormItem[];\n  @ViewChild(FormDirective) formHost: FormDirective;\n  @Input() name: string = '';\n\n  message: string;\n  private mappings = new Map<string, any>();\n  // private mappings = {\n  // 'applicable-conditions': ApplicableConditionsComponent,\n  // 'guidance': GuidanceComponent\n  // };\n\n  // TODO : use Acqusition data model\n  workflow: any;\n  selectedNav: NavItem;\n\n  @Input() item: NavItem;\n\n  navItems: NavItem[] = [];\n\n  constructor(private _formBuilder: FormBuilder, private changeDetectorRef: ChangeDetectorRef,\n    private componentFactoryResolver: ComponentFactoryResolver, private config: SideNavConfig,\n    private workflowService: WorkflowService, private componentRouteService: ComponentRouteService) {\n  }\n\n  ngOnInit() {\n    this.componentRouteService.componentObservable$.subscribe(\n      (component: any) => {\n        this.loadComponent(component);\n      });\n\n    this.componentRouteService.navObservable$.subscribe(\n      (nav: any) => {\n        this.selectedNav = nav;\n      });\n\n    this.workflowService.getDiagrams().subscribe(\n      (data: any) => {\n        // console.log(data);\n        // const acq = this.acquisition = data[0];\n        // this.navItems = this.extractSteps(acq['steps']);\n        // console.log(this.navItems);\n        const extractedData = data;\n\n        console.log(data);\n        // SyncFusion\n        // const firstData = this.workflow = extractedData[0];\n        // const project = firstData['pageOptionList'];\n        // const diagramType = firstData['diagramType'];\n        // const firstDiagram = project[0];\n        // const diagramContents = firstDiagram['diagram'];\n        // const diagramConnectors = diagramContents['connectors'];\n        // const diagramNodes = diagramContents['nodes'];\n\n        // Angular BPMN\n        const selectedData = this.workflow = extractedData.find(\n          (diagram: any) => diagram.name === this.name);\n        if (!selectedData) {\n          console.error('Unable to find project name - ' + this.name);\n          return;\n        }\n        // const selectedData = this.workflow = extractedData[3];\n        const definition = selectedData['bpmn:definitions'];\n        const diagramType = selectedData['diagramType'];\n        const process = definition['bpmn:process'];\n        const diagramContents = process[0];\n        const diagramRoot = diagramContents['bpmn:startEvent'][0];\n        const diagramConnectors = diagramContents['bpmn:sequenceFlow'];\n        const diagramNodes = diagramContents['bpmn:task'];\n        diagramNodes.push(diagramRoot);\n        this.buildNavList(diagramConnectors, diagramNodes, diagramType, diagramRoot);\n\n        // this.navItems = this.extractSteps(acq['steps']);\n        console.log(this.navItems);\n      },\n      (error: any) => {\n        console.log('Error : ' + error.message);\n      }\n    );\n\n    this.populateMappingsFromLeaves(this.navItems);\n    this.mappings.forEach((key, value) => {\n      if (!value || value === '') {\n        console.error(key + ' is not bound to any component');\n      }\n    });\n    // this.extractComponents(this.config.routes);\n  }\n\n  ngOnDestroy(): void {\n  }\n\n  // private extractComponents(routes: Route[]) {\n  //   if (!routes) {\n  //     return;\n  //   }\n\n  //   routes.forEach(route => {\n  //     this.mappings.set(route.path, route.component);\n\n  //     if (route.children) {\n  //       route.children.forEach(child => this.mappings.set(route.path, route.component));\n  //       this.extractComponents(route.children);\n  //     }\n  //   });\n  // }\n\n  private buildNavList(diagramConnectors: any, diagramNodes: any, diagramType: string, diagramRoot?: any) {\n    switch (diagramType) {\n      case 'MindMap':\n      case 'GeneralDiagram': this.buildNavListGeneralDiagram(diagramConnectors, diagramNodes);\n        break;\n      case 'OrgChart': this.buildNavListOrgChart(diagramConnectors, diagramNodes);\n        break;\n      case 'BPMN': this.buildNavListBPMN(diagramConnectors, diagramNodes, diagramRoot);\n        break;\n      default: console.error('Unable to parse diagram type - ' + diagramType);\n    }\n  }\n\n  private buildNavListBPMN(diagramConnectors: any, diagramNodes: any, diagramRoot: any) {\n    const rootNode = diagramRoot;\n    const rootNodeName = rootNode.attr.name;\n\n    let item = new NavItem();\n    item.displayName = rootNodeName;\n    this.navItems.push(item);\n\n    diagramConnectors.forEach((element: any) => {\n      element = element.attr;\n      const sourceNodeID = element.sourceRef;\n      const targetNodeID = element.targetRef;\n\n      const sourceNode = diagramNodes.find((node: any) => node.attr.id === sourceNodeID);\n      const sourceNodeName = sourceNode.attr.name;\n\n      const targetNode = diagramNodes.find((node: any) => node.attr.id === targetNodeID);\n      const targetNodeName = targetNode.attr.name;\n\n      // TODO: recursive here\n      console.log('source ' + sourceNodeName);\n      console.log('target ' + targetNodeName);\n      const resultNav = this.findRecursive(this.navItems, sourceNodeName);\n      if (resultNav !== undefined) {\n        console.log('found ' + sourceNodeName + ' pointing to ' + targetNodeName);\n      } else {\n        console.log('not found ' + sourceNodeName + ' pointing to ' + targetNodeName);\n        console.log(this.navItems);\n        return;\n      }\n\n      item = new NavItem();\n      item.displayName = targetNodeName;\n      item.parent = resultNav;\n      resultNav.children.push(item);\n    });\n  }\n\n  private buildNavListGeneralDiagram(diagramConnectors: any, diagramNodes: any) {\n    const rootNode = diagramNodes[0];\n    const rootNodeName = rootNode['annotations'][0]['content'];\n\n    let item = new NavItem();\n    item.displayName = rootNodeName;\n    this.navItems.push(item);\n\n    diagramConnectors.forEach((element: any) => {\n      const sourceNodeID = element['sourceID'];\n      const targetNodeID = element['targetID'];\n\n      const sourceNode = diagramNodes.find((node: any) => node.id === sourceNodeID);\n      const sourceNodeName = sourceNode['annotations'][0]['content'];\n\n      const targetNode = diagramNodes.find((node: any) => node.id === targetNodeID);\n      const targetNodeName = targetNode['annotations'][0]['content'];\n\n      // TODO: recursive here\n      console.log('source ' + sourceNodeName);\n      console.log('target ' + targetNodeName);\n      const resultNav = this.findRecursive(this.navItems, sourceNodeName);\n      if (resultNav !== undefined) {\n        console.log('found ' + sourceNodeName + ' pointing to ' + targetNodeName);\n      } else {\n        console.log('not found ' + sourceNodeName + ' pointing to ' + targetNodeName);\n        console.log(this.navItems);\n        return;\n      }\n\n      item = new NavItem();\n      item.displayName = targetNodeName;\n      item.parent = resultNav;\n      resultNav.children.push(item);\n    });\n  }\n\n  private buildNavListOrgChart(diagramConnectors: any, diagramNodes: any) {\n    const rootNode = diagramNodes.find((node: any) => node.id === 'rootNode');\n    const rootNodeName = rootNode['addInfo']['Name']['value'];\n\n    let item = new NavItem();\n    item.displayName = rootNodeName;\n    this.navItems.push(item);\n\n    diagramConnectors.forEach((element: any) => {\n      const sourceNodeID = element['sourceID'];\n      const targetNodeID = element['targetID'];\n\n      const sourceNode = diagramNodes.find((node: any) => node.id === sourceNodeID);\n      const sourceNodeName = sourceNode['addInfo']['Name']['value'];\n\n      const targetNode = diagramNodes.find((node: any) => node.id === targetNodeID);\n      const targetNodeName = targetNode['addInfo']['Name']['value'];\n\n      // TODO: recursive here\n      console.log('source ' + sourceNodeName);\n      console.log('target ' + targetNodeName);\n      const resultNav = this.findRecursive(this.navItems, sourceNodeName);\n      if (resultNav !== undefined) {\n        console.log('found ' + sourceNodeName + ' pointing to ' + targetNodeName);\n      } else {\n        console.log('not found ' + sourceNodeName + ' pointing to ' + targetNodeName);\n        console.log(this.navItems);\n        return;\n      }\n\n      item = new NavItem();\n      item.displayName = targetNodeName;\n      item.parent = resultNav;\n      resultNav.children.push(item);\n    });\n  }\n\n  private findRecursive(navList: any, name: string): NavItem {\n    let result = navList.find((node: any) => node.displayName === name);\n    if (result !== undefined) {\n      return result;\n    }\n\n    navList.some((element: any) => {\n      result = this.findRecursive(element.children, name);\n      if (result !== undefined) {\n        return result;\n      }\n    });\n    return result;\n  }\n\n  private populateMappingsFromLeaves(navList: NavItem[]) {\n    if (!navList) {\n      return;\n    }\n\n    navList.forEach((element: any) => {\n      if (!element.children) {\n        this.mappings.set(element.displayName, undefined);\n      }\n      this.populateMappingsFromLeaves(element.children);\n    });\n  }\n\n  getComponentType(typeName: string) {\n    const type = (this.mappings as { [key: string]: any })[typeName];\n    // const type = this.mappings[typeName];\n    // TODO: UnknownDynamicComponent\n    return type; // || UnknownDynamicComponent;\n  }\n\n  private loadComponent(component: Type<any>) {\n    if (component === undefined) {\n      console.error('No such Component - ' + component);\n      return;\n    }\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n\n    const viewContainerRef = this.formHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent(componentFactory);\n    // (<FormComponent>componentRef.instance).data = this.acquisition;\n    (<FormComponent>componentRef.instance).navItem = this.selectedNav;\n  }\n}\n"]}