{"version":3,"file":"sidenav-list-item.component.js","sourceRoot":"","sources":["../../../tmp/sidenav/sidenav-list-item/sidenav-list-item.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAgD,MAAM,eAAe,CAAC;AAC3G,OAAO,EAAC,OAAO,EAAC,MAAM,aAAa,CAAC;AACpC,OAAO,EAAC,MAAM,EAAC,MAAM,iBAAiB,CAAC;AACvC,6CAA6C;AAC7C,OAAO,EAAC,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAC,MAAM,qBAAqB,CAAC;AAC/E,OAAO,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AAEnE;IA8CE,8BAA8B;IAE9B,kCACU,qBAA4C,EACnC,MAAc;QADvB,0BAAqB,GAArB,qBAAqB,CAAuB;QACnC,WAAM,GAAN,MAAM,CAAQ;QAPE,iBAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;IAQhE,CAAC;IAED,2CAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IAED,iDAAc,GAAd,UAAe,IAAa;QAC1B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5C,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC5B,IAAI,CAAC,qBAAqB,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;YAC3D,kDAAkD;YAClD,8DAA8D;YAC9D,sCAAsC;YACtC,8BAA8B;QAChC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QACjC,CAAC;IACH,CAAC;;gBAxEF,SAAS,SAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,QAAQ,EAAE,iwBAgBT;oBACD,MAAM,EAAE,CAAC,8LAWR,CAAC;oBACF,UAAU,EAAE;wBACV,OAAO,CAAC,iBAAiB,EAAE;4BACzB,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,EAAC,SAAS,EAAE,cAAc,EAAC,CAAC,CAAC;4BACtD,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,EAAC,SAAS,EAAE,gBAAgB,EAAC,CAAC,CAAC;4BACvD,UAAU,CAAC,wBAAwB,EACjC,OAAO,CAAC,mCAAmC,CAAC,CAC7C;yBACF,CAAC;qBACH;iBACF;;;;gBA1CQ,qBAAqB;gBAHtB,MAAM;;;+BAgDX,WAAW,SAAC,oBAAoB;uBAChC,KAAK;wBACL,KAAK;;IA4BR,+BAAC;CAAA,AAzED,IAyEC;SAhCY,wBAAwB","sourcesContent":["import {Component, HostBinding, Input, OnInit, EventEmitter, Output, Type, OnDestroy} from '@angular/core';\nimport {NavItem} from '../nav-item';\nimport {Router} from '@angular/router';\n// import {NavService} from '../nav.service';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport { ComponentRouteService } from '../../shared/route.service';\n\n@Component({\n  selector: 'us-sidenav-list-item',\n  template: `\n    <a mat-list-item [ngStyle]=\"{'padding-left': (depth * 1.5) + 'em'}\" (click)=\"onItemSelected(item)\"\n                  [ngClass]=\"{'active': item.route ? router.isActive(item.route, true): false, 'expanded': expanded}\">\n      <mat-icon class=\"routeIcon\"><small>{{item.iconName}}</small></mat-icon>\n      {{item.displayName}}\n      <span fxFlex *ngIf=\"item.children && item.children.length\">\n        <span fxFlex></span>\n        <mat-icon [@indicatorRotate]=\"expanded ? 'expanded': 'collapsed'\">\n          expand_more\n        </mat-icon>\n      </span>\n    </a>\n    <div *ngIf=\"expanded\">\n      <us-sidenav-list-item *ngFor=\"let child of item.children\" [item]=\"child\" [depth]=\"depth+1\">\n      </us-sidenav-list-item>\n    </div>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      outline: none;\n    }\n    .mat-list-item {\n      padding: 8px 0;\n    }\n    .mat-list-item .routeIcon {\n      margin-right: 40px;\n    }\n  `],\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed',\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\n      ),\n    ])\n  ]\n})\nexport class SideNavListItemComponent implements OnInit {\n  expanded: boolean;\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\n  @Input() item: NavItem;\n  @Input() depth: number;\n  // subscription: Subscription;\n\n  constructor(\n    private componentRouteService: ComponentRouteService,\n              public router: Router) {\n  }\n\n  ngOnInit() {\n    if (this.depth === undefined) {\n      this.depth = 0;\n    }\n  }\n\n  onItemSelected(item: NavItem) {\n    console.log(item);\n    if (!item.children || !item.children.length) {\n      console.log(item.component);\n      this.componentRouteService.updateNavItemAndComponent(item);\n      // this.componentRouteService.updateNavItem(item);\n      // this.componentRouteService.updateComponent(item.component);\n      // this.router.navigate([item.route]);\n      // this.navService.closeNav();\n    }\n    if (item.children && item.children.length) {\n      this.expanded = !this.expanded;\n    }\n  }\n}\n"]}