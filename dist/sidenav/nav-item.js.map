{"version":3,"file":"nav-item.js","sourceRoot":"","sources":["../../tmp/sidenav/nav-item.ts"],"names":[],"mappings":"AAEA;IAsCE,iBAAY,IAAa;QACvB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;IACjC,CAAC;IA9BD,sBAAI,6BAAQ;aAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,SAAS,GAAG,IAAI,KAAK,EAAW,CAAC;YACxC,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAED,4BAAU,GAAV,UAAW,GAAwB,EAAE,KAAW;QAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACT,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;YACxC,iDAAiD;YACjD,IAAM,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAC,OAAY,IAAK,OAAA,OAAO,CAAC,QAAQ,KAAK,cAAc,EAAnC,CAAmC,CAAC,CAAC;YACzF,IAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAC,OAAY,IAAK,OAAA,OAAO,CAAC,QAAQ,KAAK,MAAM,EAA3B,CAA2B,CAAC,CAAC;YAClF,GAAG,CAAC,QAAQ,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;QACvE,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,2CAA2C;YAC3C,IAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,UAAC,OAAY,IAAK,OAAA,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,EAAE,EAAvC,CAAuC,CAAC,CAAC;YACtF,IAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,UAAC,OAAY,IAAK,OAAA,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,EAAE,EAAvC,CAAuC,CAAC,CAAC;YACvF,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QACrE,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAMH,cAAC;AAAD,CAAC,AA1CD,IA0CC","sourcesContent":["import { Type } from '@angular/core';\n\nexport class NavItem {\n  displayName: string | undefined;\n  disabled?: boolean;\n  iconName?: 'brightness_1' | 'edit' | 'done';\n  route?: string;\n  parent?: NavItem;\n  component?: Type<any>;\n  // children?: NavItem[];\n\n  private _children: NavItem[];\n\n  get children(): NavItem[] {\n    if (this._children === undefined) {\n      this._children = new Array<NavItem>();\n    }\n    return this._children;\n  }\n\n  updateIcon(nav: NavItem | undefined, model?: any) {\n    if (!nav) {\n      return;\n    }\n\n    if (nav.children && nav.children.length) {\n      // branch - set icon according to children's icon\n      const allNew = nav.children.every((element: any) => element.iconName === 'brightness_1');\n      const allDone = nav.children.every((element: any) => element.iconName === 'done');\n      nav.iconName = allNew || allDone ? nav.children[0].iconName : 'edit';\n    } else {\n      // leaf - set icon according to data fields\n      const allNew = model.every((element: any) => element === undefined || element === '');\n      const allDone = model.every((element: any) => element !== undefined && element !== '');\n      nav.iconName = allNew ? 'brightness_1' : allDone ? 'done' : 'edit';\n    }\n\n    this.updateIcon(nav.parent);\n  }\n\n  constructor(name?: string) {\n    this.displayName = name;\n    this.iconName = 'brightness_1';\n  }\n}\n"]}